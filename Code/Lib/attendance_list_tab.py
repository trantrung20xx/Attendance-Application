import tkinter
from tkinter import ttk
from Lib.odbemployee import cursor
from datetime import datetime


class AttendanceListApp:
    def __init__(self, parent, width=1000, height=500):
        """
        Kh·ªüi t·∫°o giao di·ªán cho tab Danh s√°ch ƒëi·ªÉm danh
        """
        self.parent = parent
        self.width = width
        self.height = height

        self.tab = tkinter.Frame(self.parent, bg="#e6f2ff", width=self.width, height=self.height)
        self.tree = None
        self.scrollbar = None
        self.create_widgets()

    def create_widgets(self):
        """
        T·∫°o c√°c widget (nh∆∞ Label, Treeview) cho tab danh s√°ch ƒëi·ªÉm danh.
        """
        # Ti√™u ƒë·ªÅ
        tkinter.Label(
            self.tab,
            text="üìã Danh s√°ch ƒëi·ªÉm danh",
            font=("Arial", 28, "bold"),
            bg="#e6f2ff",
            fg="#1f4e79"  # M√†u xanh ƒë·∫≠m
        ).pack(pady=15)

        # T·∫°o khung ch·ª©a b·∫£ng v√† thanh cu·ªôn
        frame = tkinter.Frame(self.tab, bg="#e6f2ff")
        frame.pack(expand=True, fill="both", padx=10, pady=10)

        # C·∫•u h√¨nh b·∫£ng Treeview
        columns = ("EmployeeID", "Name", "Department", "CheckInTime", "Status1", "CheckOutTime", "Status2")
        self.tree = ttk.Treeview(frame, columns=columns, show="headings", style="Custom.Treeview")

        # ƒê·∫∑t ti√™u ƒë·ªÅ v√† ƒë·ªãnh d·∫°ng c√°c c·ªôt
        for col in columns:
            self.tree.heading(col, text=col, anchor="center")
            self.tree.column(col, anchor="center", width=140)

        # Th√™m thanh cu·ªôn d·ªçc
        self.scrollbar = ttk.Scrollbar(frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=self.scrollbar.set)

        # ƒê·∫∑t v·ªã tr√≠ thanh cu·ªôn v√† b·∫£ng Treeview
        self.tree.grid(row=0, column=0, sticky="nsew")
        self.scrollbar.grid(row=0, column=1, sticky="ns")

        # C·∫•u h√¨nh khung ch·ª©a
        frame.grid_rowconfigure(0, weight=1)
        frame.grid_columnconfigure(0, weight=1)

        # Th√™m style cho Treeview
        style = ttk.Style()
        style.configure(
            "Custom.Treeview",
            font=("Arial", 12),  # Font ch·ªØ
            rowheight=30,  # Chi·ªÅu cao m·ªói d√≤ng
            background="#f9f9f9",  # M√†u n·ªÅn
            foreground="#333",  # M√†u ch·ªØ
            fieldbackground="#f9f9f9",  # M√†u n·ªÅn cho √¥ nh·∫≠p
        )
        style.configure(
            "Custom.Treeview.Heading",
            font=("Arial", 14, "bold"),  # Font ch·ªØ l·ªõn h∆°n cho ti√™u ƒë·ªÅ
            background="#1f4e79",  # M√†u xanh ƒë·∫≠m
            foreground="white",  # M√†u ch·ªØ tr·∫Øng
            relief="raised",  # T·∫°o hi·ªáu ·ª©ng n·ªïi cho heading
        )
        style.map(
            "Custom.Treeview",
            background=[("selected", "#87cefa")],  # M√†u n·ªÅn khi ch·ªçn d√≤ng
            foreground=[("selected", "#000000")],  # M√†u ch·ªØ khi ch·ªçn d√≤ng
        )

    def fetch_attendance_logs(self):
        """
        L·∫•y danh s√°ch ƒëi·ªÉm danh t·ª´ c∆° s·ªü d·ªØ li·ªáu.
        """
        try:
            cursor.execute("""
                SELECT
                    al.EmployeeID,
                    e.Name_,
                    e.Department,
                    al.CheckInTime,
                    al.Status_1,
                    al.CheckOutTime,
                    al.Status_2
                FROM AttendanceLogs al
                JOIN Employees e ON al.EmployeeID = e.EmployeeID
                ORDER BY al.CheckInTime DESC
            """)
            return cursor.fetchall()
        except Exception as e:
            print(f"L·ªói khi l·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh: {e}")
            return []

    def format_row(self, row):
        """
        ƒê·ªãnh d·∫°ng t·ª´ng h√†ng d·ªØ li·ªáu tr∆∞·ªõc khi ƒë∆∞a v√†o b·∫£ng.
        """
        return [
            row[0],  # EmployeeID
            row[1],  # Name
            row[2],  # Department
            row[3].strftime('%Y-%m-%d - %H:%M:%S') if isinstance(row[3], datetime) else row[3],
            row[4],  # Status1
            row[5].strftime('%Y-%m-%d - %H:%M:%S') if isinstance(row[5], datetime) else row[5],
            row[6],  # Status2
        ]

    def update_attendance_table(self, data):
        """
        C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi v√†o Treeview v·ªõi m√†u s·∫Øc xen k·∫Ω gi·ªØa c√°c d√≤ng.
        """
        # X√≥a d·ªØ li·ªáu c≈©
        for row in self.tree.get_children():
            self.tree.delete(row)

        # Th√™m d·ªØ li·ªáu m·ªõi v·ªõi m√†u s·∫Øc xen k·∫Ω
        for index, record in enumerate(data):
            formatted_record = self.format_row(record)
            # X√°c ƒë·ªãnh tag cho m√†u d√≤ng
            tag = 'evenrow' if index % 2 == 0 else 'oddrow'
            self.tree.insert("", "end", values=formatted_record, tags=(tag,))

        # ƒê·∫∑t m√†u s·∫Øc cho c√°c tag
        self.tree.tag_configure('evenrow', background='#ffffff')  # M√†u s√°ng h∆°n
        self.tree.tag_configure('oddrow', background='#f0f8ff')   # M√†u ƒë·∫≠m h∆°n

    def refresh(self):
        """
        L√†m m·ªõi b·∫£ng ƒëi·ªÉm danh v·ªõi d·ªØ li·ªáu m·ªõi t·ª´ c∆° s·ªü d·ªØ li·ªáu.
        """
        data = self.fetch_attendance_logs()  # L·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu
        self.update_attendance_table(data)  # C·∫≠p nh·∫≠t b·∫£ng v·ªõi d·ªØ li·ªáu m·ªõi

    def get_tab(self):
        """
        Tr·∫£ v·ªÅ tab danh s√°ch ƒëi·ªÉm danh.
        """
        return self.tab


# T·∫°o ƒë·ªëi t∆∞·ª£ng AttendanceListApp
attendance_list_app = None


def create_attendance_list_tab(parent, width=1000, height=500):
    """
    T·∫°o ho·∫∑c tr·∫£ v·ªÅ tab danh s√°ch ƒëi·ªÉm danh. Ch·ªâ t·∫°o ƒë·ªëi t∆∞·ª£ng m·ªôt l·∫ßn.
    """
    global attendance_list_app

    if attendance_list_app is None:
        # N·∫øu ƒë·ªëi t∆∞·ª£ng ch∆∞a ƒë∆∞·ª£c t·∫°o, t·∫°o m·ªõi
        attendance_list_app = AttendanceListApp(parent, width, height)

    return attendance_list_app.get_tab(), attendance_list_app
