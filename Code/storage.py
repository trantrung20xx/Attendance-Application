import numpy as np
import math
import cv2
import random

a = b'\x03\x03c\x17\x00\x01 \x01\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00{\x00\x00\x00\x00\x033\xff\xff\xff\xef\xff\xbb\xbb\xae\xba\xae\xaa\xae\xaa\xa6fYUEU\x14E\x10DDD@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xa8\xef\x01\xff\xff\xff\xff\x02\x00\x82m\x1c ^E\xa6 \x1e \xa7\x9d\xbe)/\xe0\xfe&\xb9\xce\xbeN\t\x1e\x9fr\x8aa\x9fw\x11\xe0\xff@\x1b\x1e\xdf\x14"\x1f\xbf\x0e&[_d/`\xff\x1c\xb0\x8c\x1fH0\xcb\x7f51\xe1\xff\x187"\x9f2\x9e\xc9\xbc)$\n\x1c-!^:U\xa2\xe3zV\xa0\x8b{6\x98^\x18:\x16\xc8y\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\x9c\xef\x01\xff\xff\xff\xff\x02\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\xef\x01\xff\xff\xff\xff\x02\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'


b = b'\x03\x03P\x15\x00\x01 \x01{\x11\x00\xff\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x06\x00m\x00\x00\x0030\xcc\xcc\xcc\xcc\xcf<\xf3\xfe\xee\xea\xaa\xba\xa6\xa9\xa6fffUUUTD\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x8b\xef\x01\xff\xff\xff\xff\x02\x00\x82/\x96\xdb>\x10\x9b\xe2\x1e8\x1c \x1e\x1b$[\xdeV($\xbe\x13.\x18>R\xaff\x9e$\xb3\xd6\xdeS9\xa9>?\x1e\xe2\x9f5&\x95\xbf<)\xe7\x1f\x0f\xaa\x19\xff[5\xd3<\x1b\x96B\xb8\x1f\x9a\x02\xd8^1%\x98\x1c\x19\x03\xb9*\x1b\xd8\xf9\\.Q\xd9,\x9b\xd57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!\x91\xef\x01\xff\xff\xff\xff\x02\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\xef\x01\xff\xff\xff\xff\x02\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'


fingerprint1 = np.frombuffer(a, dtype=np.uint8)
fingerprint2 = np.frombuffer(b, dtype=np.uint8)

fingerprint1.reshape(16, 32)
fingerprint2.reshape(16, 32)


print(cv2.matchTemplate(fingerprint1, fingerprint2, cv2.TM_CCOEFF_NORMED))


# Hàm tính Hamming Distance
def hamming_distance(fingerprint1, fingerprint2):
    if len(fingerprint1) != len(fingerprint2):
        raise ValueError("Fingerprint templates must have the same length")
    return sum(bin(byte1 ^ byte2).count('1') for byte1, byte2 in zip(fingerprint1, fingerprint2))


# Tính khoảng cách Hamming
distance = hamming_distance(fingerprint1, fingerprint2)
print(f"Hamming Distance: {distance}")

# Đặt ngưỡng so khớp
threshold = 50  # Thử nghiệm giá trị phù hợp
if distance <= threshold:
    print("Fingerprints match!")
else:
    print("Fingerprints do not match.")

tpl = (None, 0)

for i, j in enumerate(range(0, 100)):
    tpl = (random.randint(0, 300) - i, max(tpl[1], max(j, random.randint(0, 300))))
print(tpl[0])
print(tpl[1])
